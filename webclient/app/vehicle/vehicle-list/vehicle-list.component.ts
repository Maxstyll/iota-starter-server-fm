import { Component, Input } from '@angular/core';
import { Http, Response, Headers, RequestOptions } from '@angular/http';
import { OrderByPipe } from '../../utils/order-by.pipe';
import { MomentPipe } from '../../utils/moment.pipe';

@Component({
  moduleId: module.id,
  selector: 'vehicle-list',
  templateUrl: 'vehicle-list.component.html',
  styleUrls: ['vehicle-list.component.css'],
  pipes: [OrderByPipe, MomentPipe]
})

export class VehicleListComponent {
  vehicles: Vehicle[];
  requestSending: boolean;
  orderByKey: string;
  orderByOrder: boolean;
  numRecInPage: number;
  pageNumber: number;
  hasNext: boolean;

  constructor(private http: Http) {
    this.numRecInPage = 25;
    this.pageNumber = 1;
    this.hasNext = false;
  }

  ngOnInit() {
    this._getVehicles(1);
  }

  onOrderBy(key) {
    this.orderByOrder = (key === this.orderByKey) ? !this.orderByOrder : true;
    this.orderByKey = key;
  }

  // refresh table
  onReload(event) {
    this._getVehicles(1);
  }

  onNumPageChanged(num:number) {
    this.numRecInPage = num;
    this._getVehicles(1);
  }

  onShowPrev(event) {
      if (this.pageNumber > 1) {
        this._getVehicles(this.pageNumber - 1);
      }
  }

  onShowNext(event) {
    if (this.hasNext) {
      this._getVehicles(this.pageNumber + 1);
    }
  }

  // deactivate given vehicle
  onDeactivate(mo_id: string) {
    let url = "/user/vehicle/" + mo_id;
    let body = JSON.stringify({mo_id: mo_id, status: "Inactive"});
    let headers = new Headers({"Content-Type": "application/json"});
    let options = new RequestOptions({headers: headers});

    this.requestSending = true;
    this.http.put(url, body, options)
    .subscribe((response: Response) => {
      if (response.status === 200) {
        // Update vehicle list when succeeded
        this._getVehicles(this.pageNumber);
      }
    });
  }

  // Get vehicle list from server and update table
  private _getVehicles(pageNumber: number) {
    this.requestSending = true;
    let url = "/user/vehicle?num_rec_in_page=" + this.numRecInPage + "&num_page=" + pageNumber;
    this.http.get(url)
    .subscribe((response: Response) => {
      if (response.status === 200) {
        let resJson = response.json();
        this.vehicles = resJson && resJson.data.map(function(v) {
          v._id = v.serial_number || v.mo_id;
          return v;
        });
        this.pageNumber = pageNumber;
        this.hasNext = this.numRecInPage <= this.vehicles.length;
      }
      this.requestSending = false;
    }, (error: any) => {
      if (error.status === 400) {
        alert("Thre are no more vehicles.");
      }
      this.hasNext = false;
      this.requestSending = false;
    });
  }
}

// Vehicle definition
class Vehicle {
  _id: string; // serial number or mo_id
  mo_id: string; // The ID of the vehicle that is automatically generated by the system.
  internal_mo_id: number; // The numerical ID of the vehicle that is automatically generated by the system.
  vendor: string; // The vendor ID of the vehicle that is created from within the vendor's system.
  model: string; // The model of the vehicle.
  type: string; // The type of the vehicle. = [ArticulatedTruck,CarWithTrailer,HighSidedVehicle,PassengerCar,Motorcycle,Bus,LightTruck,HeavyTruck,HeavyTruck_AC2,HeavyTruck_AC3,HeavyTruck_AC4,HeavyTruck_AC5,HeavyTruck_AC6,HeavyTruck_AC7,TruckWithTrailer,TruckWithTrailer_AC2,TruckWithTrailer_AC3,TruckWithTrailer_AC4,TruckWithTrailer_AC5,TruckWithTrailer_AC6,TruckWithTrailer_AC7,Unknown]
  serial_number: string; // The serial number of the vehicle.
  usage: string; //  The usage code of the vehicle. = [PrivateUse,Taxi,Commercial,PublicTransport,Emergency,PatrolServices,RoadOperator,SnowPlough,HazMat,Other,Unknown]
  description: string; // Description of the vehicle.
  width: number; // The width of the vehicle.
  height: number; // The height of the vehicle.
  driver_id: string; // The driver ID that is created by the driver interface from within the vehicle.
  status: string;
}
